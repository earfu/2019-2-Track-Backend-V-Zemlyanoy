class Tic_tac_toe:
	__symbols = ['O','X']  #marks for the board numbered as per turn order parity
	__order = 0  #turn order modulo 2
	__turn_history = ()
	__board = [0,1,2,3,4,5,6,7,8,9]
	__turns = 0
	__strategy = list(range(9))
	__finished = False
	__won = False
	__tied = False

	def __init__(self):
		return

	def start(self,order):  #reset and start anew
		if not (order == 1 or order == 2):  #1 for player going first
			print("Unexpected input.")
			return False
	
		print("Welcome to this clever game!")
		print("Good luck! You are not going to win anyway.")
		self.__finished = False
		self.__won = False
		self.__tied = False
		self.__order = (order + 1)%2
		self.__turn_history = ()
		self.__board = [0,1,2,3,4,5,6,7,8,9]
		self.__turns = 0
		self.__strategy = list(range(9))
		if (self.__order == 1):
			self.__strategy[0] = {():(5,)}
			self.__strategy[2] = {(5,1):(2,), (5,2):(3,), (5,3):(6,), (5,4):(1,), (5,6):(9,), (5,7):(4,), (5,8):(7,), (5,9):(8,)}
			self.__strategy[4] = {
				(5,1,2,3):(8,1), (5,1,2,4):(8,1), (5,1,2,6):(8,1), (5,1,2,7):(8,1), (5,1,2,8):(7,), (5,1,2,9):(8,1),
				(5,2,3,1):(7,1), (5,2,3,4):(7,1), (5,2,3,6):(7,1), (5,2,3,7):(6,), (5,2,3,8):(7,1), (5,2,3,9):(7,1),
				(5,3,6,1):(4,1), (5,3,6,2):(4,1), (5,3,6,4):(1,), (5,3,6,7):(4,1), (5,3,6,8):(4,1), (5,3,6,9):(4,1),
				(5,4,1,2):(9,1), (5,4,1,3):(9,1), (5,4,1,6):(9,1), (5,4,1,7):(9,1), (5,4,1,8):(9,1), (5,4,1,9):(2,),
				(5,6,9,1):(8,), (5,6,9,2):(1,1), (5,6,9,3):(1,1), (5,6,9,4):(1,1), (5,6,9,7):(1,1), (5,6,9,8):(1,1),
				(5,7,4,1):(6,1), (5,7,4,2):(6,1), (5,7,4,3):(6,1), (5,7,4,6):(9,), (5,7,4,8):(6,1), (5,7,4,9):(6,1),
				(5,8,7,1):(3,1), (5,8,7,2):(3,1), (5,8,7,3):(4,), (5,8,7,4):(3,1), (5,8,7,6):(3,1), (5,8,7,9):(3,1),
				(5,9,8,1):(2,1), (5,9,8,2):(3,), (5,9,8,3):(2,1), (5,9,8,4):(2,1), (5,9,8,6):(2,1), (5,9,8,7):(2,1),
				}
			self.__strategy[6] = {
				(5,1,2,8,7,3):(4,), (5,1,2,8,7,4):(3,1),  (5,1,2,8,7,6):(3,1),  (5,1,2,8,7,9):(3,1),
				(5,2,3,7,6,1):(4,1), (5,2,3,7,6,4):(9,1), (5,2,3,7,6,8):(4,1), (5,2,3,7,6,9):(4,1),
				(5,3,6,4,1,2):(9,1), (5,3,6,4,1,7):(9,1), (5,3,6,4,1,8):(9,1), (5,3,6,4,1,9):(2,),
				(5,4,1,9,2,3):(8,1), (5,4,1,9,2,6):(8,1), (5,4,1,9,2,7):(8,1), (5,4,1,9,2,8):(3,1),
				(5,6,9,1,8,2):(7,1), (5,6,9,1,8,3):(2,1), (5,6,9,1,8,4):(2,1), (5,6,9,1,8,7):(2,1),
				(5,7,4,6,9,1):(8,), (5,7,4,6,9,2):(1,1), (5,7,4,6,9,3):(1,1), (5,7,4,6,9,8):(1,1),
				(5,8,7,3,4,1):(6,1), (5,8,7,3,4,2):(6,1), (5,8,7,3,4,6):(1,1), (5,8,7,3,4,9):(6,1),
				(5,9,8,2,3,1):(7,1), (5,9,8,2,3,4):(7,1), (5,9,8,2,3,6):(7,1), (5,9,8,2,3,7):(6,), 
				}
			self.__strategy[8] = {
				(5,1,2,8,7,3,4,6):(9,0), (5,1,2,8,7,3,4,9):(6,1),
				(5,3,6,4,1,9,2,7):(8,1), (5,3,6,4,1,9,2,8):(7,0),
				(5,7,4,6,9,1,8,2):(3,0), (5,7,4,6,9,1,8,3):(2,1),
				(5,9,8,2,3,7,6,1):(4,1), (5,9,8,2,3,7,6,4):(1,0),
				}
		else:
			self.__strategy[1] = {(1,):(5,), (2,):(5,), (3,):(5,), (4,):(5,), (5,):(1,), (6,):(5,), (7,):(5,), (8,):(5,), (9,):(5,)}
			self.__strategy[3] = {
				(1,5,2):(3,), (1,5,3):(2,), (1,5,4):(7,), (1,5,6):(8,), (1,5,7):(4,), (1,5,8):(6,), (1,5,9):(2,),
				(2,5,1):(3,), (2,5,3):(1,), (2,5,4):(1,), (2,5,6):(3,), (2,5,7):(6,), (2,5,8):(1,), (2,5,9):(4,),
				(3,5,1):(2,), (3,5,2):(1,), (3,5,4):(8,), (3,5,6):(9,), (3,5,7):(2,), (3,5,8):(4,), (3,5,9):(6,), 
				(4,5,1):(7,), (4,5,2):(1,), (4,5,3):(8,), (4,5,6):(1,), (4,5,7):(1,), (4,5,8):(7,), (4,5,9):(2,),
				(5,1,2):(8,), (5,1,3):(7,), (5,1,4):(6,), (5,1,6):(4,), (5,1,7):(3,), (5,1,8):(2,), (5,1,9):(3,),
				(6,5,1):(8,), (6,5,2):(3,), (6,5,3):(9,), (6,5,4):(1,), (6,5,7):(2,), (6,5,8):(9,), (6,5,9):(3,),
				(7,5,1):(4,), (7,5,2):(6,), (7,5,3):(2,), (7,5,4):(1,), (7,5,6):(2,), (7,5,8):(9,), (7,5,9):(8,),
				(8,5,1):(6,), (8,5,2):(1,), (8,5,3):(4,), (8,5,4):(7,), (8,5,6):(9,), (8,5,7):(9,), (8,5,9):(7,),
				(9,5,1):(2,), (9,5,2):(4,), (9,5,3):(6,), (9,5,4):(2,), (9,5,6):(3,), (9,5,7):(8,), (9,5,8):(7,),
				}
			self.__strategy[5] = {
				(1,5,2,3,4):(7,1), (1,5,2,3,6):(7,1), (1,5,2,3,7):(4,), (1,5,2,3,8):(7,1), (1,5,2,3,9):(7,1),
				(1,5,3,2,4):(8,1), (1,5,3,2,6):(8,1), (1,5,3,2,7):(8,1), (1,5,3,2,8):(4,), (1,5,3,2,9):(8,1),
				(1,5,4,7,2):(3,1), (1,5,4,7,3):(2,), (1,5,4,7,6):(3,1), (1,5,4,7,8):(3,1), (1,5,4,7,9):(3,1),
				(1,5,6,8,2):(3,), (1,5,6,8,3):(2,1), (1,5,6,8,4):(2,1), (1,5,6,8,7):(2,1), (1,5,6,8,9):(2,1),
				(1,5,7,4,2):(6,1), (1,5,7,4,3):(6,1), (1,5,7,4,6):(2,), (1,5,7,4,8):(6,1), (1,5,7,4,9):(6,1),
				(1,5,8,6,2):(4,1), (1,5,8,6,3):(4,1), (1,5,8,6,4):(7,), (1,5,8,6,7):(4,1), (1,5,8,6,9):(4,1),
				(1,5,9,2,3):(8,1), (1,5,9,2,4):(8,1), (1,5,9,2,6):(8,1), (1,5,9,2,7):(8,1), (1,5,9,2,8):(7,),
				(2,5,1,3,4):(7,1), (2,5,1,3,6):(7,1), (2,5,1,3,7):(4,), (2,5,1,3,8):(7,1), (2,5,1,3,9):(7,1),
				(2,5,3,1,4):(9,1), (2,5,3,1,6):(9,1), (2,5,3,1,7):(9,1), (2,5,3,1,8):(9,1), (2,5,3,1,9):(6,),
				(2,5,4,1,3):(9,1), (2,5,4,1,6):(9,1), (2,5,4,1,7):(9,1), (2,5,4,1,8):(9,1), (2,5,4,1,9):(3,),
				(2,5,6,3,1):(7,1), (2,5,6,3,4):(7,1), (2,5,6,3,7):(1,), (2,5,6,3,8):(7,1), (2,5,6,3,9):(7,1),
				(2,5,7,6,1):(4,1), (2,5,7,6,3):(4,1), (2,5,7,6,4):(1,), (2,5,7,6,8):(4,1), (2,5,7,6,9):(4,1),
				(2,5,8,1,3):(9,1), (2,5,8,1,4):(9,1), (2,5,8,1,6):(9,1), (2,5,8,1,7):(9,1), (2,5,8,1,9):(7,),
				(2,5,9,4,1):(6,1), (2,5,9,4,3):(6,1), (2,5,9,4,6):(3,), (2,5,9,4,7):(6,1), (2,5,9,4,8):(6,1),
				(3,5,1,2,4):(8,1), (3,5,1,2,6):(8,1), (3,5,1,2,7):(8,1), (3,5,1,2,8):(4,), (3,5,1,2,9):(8,1),
				(3,5,2,1,4):(9,1), (3,5,2,1,6):(9,1), (3,5,2,1,7):(9,1), (3,5,2,1,8):(9,1), (3,5,2,1,9):(6,),
				(3,5,4,8,1):(2,1), (3,5,4,8,2):(1,), (3,5,4,8,6):(2,1), (3,5,4,8,7):(2,1), (3,5,4,8,9):(2,1),
				(3,5,6,9,1):(2,), (3,5,6,9,2):(1,1), (3,5,6,9,4):(1,1), (3,5,6,9,7):(1,1), (3,5,6,9,8):(1,1),
				(3,5,7,2,1):(8,1), (3,5,7,2,4):(8,1), (3,5,7,2,6):(8,1), (3,5,7,2,8):(9,), (3,5,7,2,9):(8,1),
				(3,5,8,4,1):(6,1), (3,5,8,4,2):(6,1), (3,5,8,4,6):(9,), (3,5,8,4,7):(6,1), (3,5,8,4,9):(6,1),
				(3,5,9,6,1):(4,1), (3,5,9,6,2):(4,1), (3,5,9,6,4):(2,), (3,5,9,6,7):(4,1), (3,5,9,6,8):(4,1),
				(4,5,1,7,2):(3,1), (4,5,1,7,3):(2,), (4,5,1,7,6):(3,1), (4,5,1,7,8):(3,1), (4,5,1,7,9):(3,1),
				(4,5,2,1,3):(9,1), (4,5,2,1,6):(9,1), (4,5,2,1,7):(9,1), (4,5,2,1,8):(9,1), (4,5,2,1,9):(3,),
				(4,5,3,8,1):(2,1), (4,5,3,8,2):(1,), (4,5,3,8,6):(2,1), (4,5,3,8,7):(2,1), (4,5,3,8,9):(2,1),
				(4,5,6,1,2):(9,1), (4,5,6,1,3):(9,1), (4,5,6,1,7):(9,1), (4,5,6,1,8):(9,1), (4,5,6,1,9):(3,),
				(4,5,7,1,2):(9,1), (4,5,7,1,3):(9,1), (4,5,7,1,6):(9,1), (4,5,7,1,8):(9,1), (4,5,7,1,9):(8,),
				(4,5,8,7,1):(3,1), (4,5,8,7,2):(3,1), (4,5,8,7,3):(1,), (4,5,8,7,6):(3,1), (4,5,8,7,9):(3,1),
				(4,5,9,2,1):(8,1), (4,5,9,2,3):(8,1), (4,5,9,2,6):(8,1), (4,5,9,2,7):(8,1), (4,5,9,2,8):(7,),
				(5,1,2,8,3):(7,), (5,1,2,8,4):(6,), (5,1,2,8,6):(4,), (5,1,2,8,7):(3,), (5,1,2,8,9):(7,),
				(5,1,3,7,2):(4,1), (5,1,3,7,4):(6,), (5,1,3,7,6):(4,1), (5,1,3,7,8):(4,1), (5,1,3,7,9):(4,1),
				(5,1,4,6,2):(8,), (5,1,4,6,3):(7,), (5,1,4,6,7):(3,), (5,1,4,6,8):(2,), (5,1,4,6,9):(3,),
				(5,1,6,4,2):(7,1), (5,1,6,4,3):(7,1), (5,1,6,4,7):(3,), (5,1,6,4,8):(7,1), (5,1,6,4,9):(7,1),
				(5,1,7,3,2):(8,), (5,1,7,3,4):(2,1), (5,1,7,3,6):(2,1), (5,1,7,3,8):(2,1), (5,1,7,3,9):(2,1),
				(5,1,8,2,3):(7,), (5,1,8,2,4):(3,1), (5,1,8,2,6):(3,1), (5,1,8,2,7):(3,1), (5,1,8,2,9):(3,1),
				(5,1,9,3,2):(8,), (5,1,9,3,4):(2,1), (5,1,9,3,6):(2,1), (5,1,9,3,7):(2,1), (5,1,9,3,8):(2,1),
				(6,5,1,8,2):(3,), (6,5,1,8,3):(2,1), (6,5,1,8,4):(2,1), (6,5,1,8,7):(2,1), (6,5,1,8,9):(2,1),
				(6,5,2,3,1):(7,1), (6,5,2,3,4):(7,1), (6,5,2,3,7):(1,), (6,5,2,3,8):(7,1), (6,5,2,3,9):(7,1),
				(6,5,3,9,1):(2,), (6,5,3,9,2):(1,1), (6,5,3,9,4):(1,1), (6,5,3,9,7):(1,1), (6,5,3,9,8):(1,1),
				(6,5,4,1,2):(9,1), (6,5,4,1,3):(9,1), (6,5,4,1,7):(9,1), (6,5,4,1,8):(9,1), (6,5,4,1,9):(3,),
				(6,5,7,2,1):(8,1), (6,5,7,2,3):(8,1), (6,5,7,2,4):(8,1), (6,5,7,2,8):(9,), (6,5,7,2,9):(8,1),
				(6,5,8,9,1):(3,), (6,5,8,9,2):(1,1), (6,5,8,9,3):(1,1), (6,5,8,9,4):(1,1), (6,5,8,9,7):(1,1),
				(6,5,9,3,1):(7,1), (6,5,9,3,2):(7,1), (6,5,9,3,4):(7,1), (6,5,9,3,7):(8,), (6,5,9,3,8):(7,1),
				(7,5,1,4,2):(6,1), (7,5,1,4,3):(6,1), (7,5,1,4,6):(2,), (7,5,1,4,8):(6,1), (7,5,1,4,9):(6,1),
				(7,5,2,6,1):(4,1), (7,5,2,6,3):(4,1), (7,5,2,6,4):(1,), (7,5,2,6,8):(4,1), (7,5,2,6,9):(4,1),
				(7,5,3,2,1):(8,1), (7,5,3,2,4):(8,1), (7,5,3,2,6):(8,1), (7,5,3,2,8):(9,), (7,5,3,2,9):(8,1),
				(7,5,4,1,2):(9,1), (7,5,4,1,3):(9,1), (7,5,4,1,6):(9,1), (7,5,4,1,8):(9,1), (7,5,4,1,9):(8,),
				(7,5,6,2,1):(8,1), (7,5,6,2,3):(8,1), (7,5,6,2,4):(8,1), (7,5,6,2,8):(9,), (7,5,6,2,9):(8,1),
				(7,5,8,9,1):(4,), (7,5,8,9,2):(1,1), (7,5,8,9,3):(1,1), (7,5,8,9,4):(1,1), (7,5,8,9,6):(1,1),
				(7,5,9,8,1):(2,1), (7,5,9,8,2):(4,), (7,5,9,8,3):(2,1), (7,5,9,8,4):(2,1), (7,5,9,8,6):(2,1),
				(8,5,1,6,2):(4,1), (8,5,1,6,3):(4,1), (8,5,1,6,4):(7,), (8,5,1,6,7):(4,1), (8,5,1,6,9):(4,1),
				(8,5,2,1,3):(9,1), (8,5,2,1,4):(9,1), (8,5,2,1,6):(9,1), (8,5,2,1,7):(9,1), (8,5,2,1,9):(7,),
				(8,5,3,4,1):(6,1), (8,5,3,4,2):(6,1), (8,5,3,4,6):(9,), (8,5,3,4,7):(6,1), (8,5,3,4,9):(6,1),
				(8,5,4,7,1):(3,1), (8,5,4,7,2):(3,1), (8,5,4,7,3):(1,), (8,5,4,7,6):(3,1), (8,5,4,7,9):(3,1),
				(8,5,6,9,1):(3,), (8,5,6,9,2):(1,1), (8,5,6,9,3):(1,1), (8,5,6,9,4):(1,1), (8,5,6,9,7):(1,1),
				(8,5,7,9,1):(4,), (8,5,7,9,2):(1,1), (8,5,7,9,3):(1,1), (8,5,7,9,4):(1,1), (8,5,7,9,6):(1,1),
				(8,5,9,7,1):(3,1), (8,5,9,7,2):(3,1), (8,5,9,7,3):(6,), (8,5,9,7,4):(3,1), (8,5,9,7,6):(3,1),
				(9,5,1,2,3):(8,1), (9,5,1,2,4):(8,1), (9,5,1,2,6):(8,1), (9,5,1,2,7):(8,1), (9,5,1,2,8):(7,),
				(9,5,2,4,1):(6,1), (9,5,2,4,3):(6,1), (9,5,2,4,6):(3,), (9,5,2,4,7):(6,1), (9,5,2,4,8):(6,1),
				(9,5,3,6,1):(4,1), (9,5,3,6,2):(4,1), (9,5,3,6,4):(2,), (9,5,3,6,7):(4,1), (9,5,3,6,8):(4,1),
				(9,5,4,2,1):(8,1), (9,5,4,2,3):(8,1), (9,5,4,2,6):(8,1), (9,5,4,2,7):(8,1), (9,5,4,2,8):(7,),
				(9,5,6,3,1):(7,1), (9,5,6,3,2):(7,1), (9,5,6,3,4):(7,1), (9,5,6,3,7):(8,), (9,5,6,3,8):(7,1),
				(9,5,7,8,1):(2,1), (9,5,7,8,2):(4,), (9,5,7,8,3):(2,1), (9,5,7,8,4):(2,1), (9,5,7,8,6):(2,1),
				(9,5,8,7,1):(3,1), (9,5,8,7,2):(3,1), (9,5,8,7,3):(6,), (9,5,8,7,4):(3,1), (9,5,8,7,6):(3,1),
				}
			self.__strategy[7] = {
				(1,5,2,3,7,4,6):(9,), (1,5,2,3,7,4,8):(6,1), (1,5,2,3,7,4,9):(6,1),
				(1,5,3,2,8,4,6):(9,), (1,5,3,2,8,4,7):(6,1), (1,5,3,2,8,4,9):(6,1),
				(1,5,4,7,3,2,6):(8,1), (1,5,4,7,3,2,8):(9,), (1,5,4,7,3,2,9):(8,1),
				(1,5,6,8,2,3,4):(7,1), (1,5,6,8,2,3,7):(4,), (1,5,6,8,2,3,9):(7,1),
				(1,5,7,4,6,2,3):(8,1), (1,5,7,4,6,2,8):(9,), (1,5,7,4,6,2,9):(8,1),
				(1,5,8,6,4,7,2):(3,1), (1,5,8,6,4,7,3):(2,), (1,5,8,6,4,7,9):(3,1),
				(1,5,9,2,8,7,3):(6,), (1,5,9,2,8,7,4):(3,1), (1,5,9,2,8,7,6):(3,1),
				(2,5,1,3,7,4,6):(9,), (2,5,1,3,7,4,8):(6,1), (2,5,1,3,7,4,8):(6,1),
				(2,5,3,1,9,6,4):(7,), (2,5,3,1,9,6,7):(4,1), (2,5,3,1,9,6,8):(4,1),
				(2,5,4,1,9,3,6):(7,1), (2,5,4,1,9,3,7):(8,), (2,5,4,1,9,3,8):(7,1),
				(2,5,6,3,7,1,4):(9,1), (2,5,6,3,7,1,8):(9,1), (2,5,6,3,7,1,9):(8,),
				(2,5,7,6,4,1,3):(9,1), (2,5,7,6,4,1,8):(9,1), (2,5,7,6,4,1,9):(8,),
				(2,5,8,1,9,7,3):(4,1), (2,5,8,1,9,7,4):(7,1), (2,5,8,1,9,7,6):(4,1),
				(2,5,9,4,6,3,1):(7,1), (2,5,9,4,6,3,7):(8,), (2,5,9,4,6,3,8):(7,1),
				(3,5,1,2,8,4,6):(9,), (3,5,1,2,8,4,7):(6,1), (3,5,1,2,8,4,9):(6,1),
				(3,5,2,1,9,6,4):(7,), (3,5,2,1,9,6,7):(4,1), (3,5,2,1,9,6,8):(4,1),
				(3,5,4,8,2,1,6):(9,1), (3,5,4,8,2,1,7):(9,1), (3,5,4,8,2,1,9):(6,),
				(3,5,6,9,1,2,4):(8,1), (3,5,6,9,1,2,7):(8,1), (3,5,6,9,1,2,8):(7,),
				(3,5,7,2,8,9,1):(4,), (3,5,7,2,8,9,4):(1,1), (3,5,7,2,8,9,6):(1,1),
				(3,5,8,4,6,9,1):(2,), (3,5,8,4,6,9,2):(1,1), (3,5,8,4,6,9,7):(1,1),
				(3,5,9,6,4,2,1):(8,1), (3,5,9,6,4,2,7):(8,1), (3,5,9,6,4,2,8):(7,),
				(4,5,1,7,3,2,6):(8,1), (4,5,1,7,3,2,8):(9,), (4,5,1,7,3,2,9):(8,1),
				(4,5,2,1,9,3,6):(7,1), (4,5,2,1,9,3,7):(8,), (4,5,2,1,9,3,8):(7,1),
				(4,5,3,8,2,1,6):(9,1), (4,5,3,8,2,1,7):(9,1), (4,5,3,8,2,1,9):(6,),
				(4,5,6,1,9,3,2):(7,1), (4,5,6,1,9,3,7):(2,1), (4,5,6,1,9,3,8):(2,1),
				(4,5,7,1,9,8,2):(3,), (4,5,7,1,9,8,3):(2,1), (4,5,7,1,9,8,6):(2,1),
				(4,5,8,7,3,1,2):(9,1), (4,5,8,7,3,1,6):(9,1), (4,5,8,7,3,1,9):(6,),
				(4,5,9,2,8,7,1):(3,1), (4,5,9,2,8,7,3):(6,), (4,5,9,2,8,7,6):(3,1),
				
				(5,1,2,8,3,7,4):(9,1), (5,1,2,8,3,7,6):(4,1), (5,1,2,8,3,7,9):(4,1),
				(5,1,2,8,4,6,3):(7,), (5,1,2,8,4,6,7):(3,), (5,1,2,8,4,6,9):(3,),
				(5,1,2,8,6,4,3):(7,1), (5,1,2,8,6,4,7):(3,), (5,1,2,8,6,4,9):(7,1),
				(5,1,2,8,7,3,4):(6,), (5,1,2,8,7,3,6):(4,), (5,1,2,8,7,3,9):(4,),
				(5,1,2,8,9,7,3):(4,1), (5,1,2,8,9,7,4):(6,), (5,1,2,8,9,7,6):(4,1),
				
				(5,1,3,7,4,6,2):(8,), (5,1,3,7,4,6,8):(2,), (5,1,3,7,4,6,9):(2,),
				
				(5,1,4,6,2,8,3):(7,), (5,1,4,6,2,8,7):(3,), (5,1,4,6,2,8,9):(3,),
				(5,1,4,6,3,7,2):(8,), (5,1,4,6,3,7,8):(2,), (5,1,4,6,3,7,9):(2,),
				(5,1,4,6,7,3,2):(9,1), (5,1,4,6,7,3,8):(2,1), (5,1,4,6,7,3,9):(2,1),
				(5,1,4,6,8,2,3):(7,), (5,1,4,6,8,2,7):(3,1), (5,1,4,6,8,2,9):(3,1),
				(5,1,4,6,9,3,2):(8,), (5,1,4,6,9,3,7):(2,1), (5,1,4,6,9,3,8):(2,1),
				
				(5,1,6,4,7,3,2):(8,), (5,1,6,4,7,3,8):(2,1), (5,1,6,4,7,3,9):(2,1),
				
				(5,1,7,3,2,8,4):(6,), (5,1,7,3,2,8,6):(4,), (5,1,7,3,2,8,9):(4,),
				
				(5,1,8,2,3,7,4):(6,), (5,1,8,2,3,7,6):(4,1), (5,1,8,2,3,7,9):(4,1),
				
				(5,1,9,3,2,8,4):(6,), (5,1,9,3,2,8,6):(4,), (5,1,9,3,2,8,7):(4,),
				
				(6,5,1,8,2,3,4):(7,1), (6,5,1,8,2,3,7):(4,), (6,5,1,8,2,3,9):(7,1),
				(6,5,2,3,7,1,4):(9,1), (6,5,2,3,7,1,8):(9,1), (6,5,2,3,7,1,9):(8,),
				(6,5,3,9,1,2,4):(8,1), (6,5,3,9,1,2,7):(8,1), (6,5,3,9,1,2,8):(7,),
				(6,5,4,1,9,3,2):(7,1), (6,5,4,1,9,3,7):(2,), (6,5,4,1,9,3,8):(2,1),
				(6,5,7,2,8,9,1):(4,), (6,5,7,2,8,9,3):(1,1), (6,5,7,2,8,9,4):(1,1),
				(6,5,8,9,1,3,2):(7,1), (6,5,8,9,1,3,4):(7,1), (6,5,8,9,1,3,7):(4,),
				(6,5,9,3,7,8,1):(2,1), (6,5,9,3,7,8,2):(1,), (6,5,9,3,7,8,4):(2,1),
				(7,5,1,4,6,2,3):(8,1), (7,5,1,4,6,2,8):(9,), (7,5,1,4,6,2,9):(8,1),
				(7,5,2,6,4,1,3):(9,1), (7,5,2,6,4,1,8):(9,1), (7,5,2,6,4,1,9):(8,),
				(7,5,3,2,8,9,1):(4,), (7,5,3,2,8,9,4):(1,1), (7,5,3,2,8,9,6):(1,1),
				(7,5,4,1,9,8,2):(3,), (7,5,4,1,9,8,3):(2,1), (7,5,4,1,9,8,6):(2,1),
				(7,5,6,2,8,9,1):(4,), (7,5,6,2,8,9,3):(1,1), (7,5,6,2,8,9,4):(1,1),
				(7,5,8,9,1,4,2):(6,1), (7,5,8,9,1,4,3):(6,1), (7,5,8,9,1,4,6):(3,),
				(7,5,9,8,2,4,1):(6,1), (7,5,9,8,2,4,3):(6,1), (7,5,9,8,2,4,6):(3,),
				(8,5,1,6,4,7,2):(3,1), (8,5,1,6,4,7,3):(2,), (8,5,1,6,4,7,9):(3,1),
				(8,5,2,1,9,7,3):(4,1), (8,5,2,1,9,7,4):(3,1), (8,5,2,1,9,7,6):(3,1),
				(8,5,3,4,6,9,1):(2,), (8,5,3,4,6,9,2):(1,1), (8,5,3,4,6,9,7):(1,1),
				(8,5,4,7,3,1,2):(9,1), (8,5,4,7,3,1,6):(9,1), (8,5,4,7,3,1,9):(6,),
				(8,5,6,9,1,3,2):(7,1), (8,5,6,9,1,3,4):(7,1), (8,5,6,9,1,3,7):(4,),
				(8,5,7,9,1,4,2):(6,1), (8,5,7,9,1,4,3):(6,1), (8,5,7,9,1,4,6):(3,),
				(8,5,9,7,3,6,1):(4,1), (8,5,9,7,3,6,2):(4,1), (8,5,9,7,3,6,4):(1,),
				(9,5,1,2,8,7,3):(6,), (9,5,1,2,8,7,4):(3,1), (9,5,1,2,8,7,6):(3,1),
				(9,5,2,4,6,3,1):(7,1), (9,5,2,4,6,3,7):(8,), (9,5,2,4,6,3,8):(7,1),
				(9,5,3,6,4,2,1):(8,1), (9,5,3,6,4,2,7):(8,1), (9,5,3,6,4,2,8):(7,),
				(9,5,4,2,8,7,1):(3,1), (9,5,4,2,8,7,3):(6,), (9,5,4,2,8,7,6):(3,1),
				(9,5,6,3,7,8,1):(2,1), (9,5,6,3,7,8,2):(1,), (9,5,6,3,7,8,4):(2,1),
				(9,5,7,8,2,4,1):(6,1), (9,5,7,8,2,4,3):(6,1), (9,5,7,8,2,4,6):(3,),
				(9,5,8,7,3,6,1):(4,1), (9,5,8,7,3,6,2):(4,1), (9,5,8,7,3,6,4):(1,),
				}

		if self.__order == 1:
			self.turn(5)
			self.display_board()

		return True

	def turn(self, mark):  #take a turn
		if  not( (mark in self.__board) and (mark != 0) and (mark != 'O') and (mark != 'X') ):
			print("Unexpected input. Try again.")
			return False
#		print("Turn {}",format(self.__turns))
#		if ( (self.__turns + self.__order)%2 == 0 ):  #Player takes turn
#			self.display_board()
#			print("Take your turn by typing the number correspodning to the free cell you wish to mark.")
#			print(self.__board)
#			b = input()
#			while (1):
#					break
#			b = input()

		mark = int(mark)			
		self.__turns += 1
		self.__turn_history += (mark,)
		self.__board[mark] = self.__symbols[self.__turns%2]
		if (self.__turns == 9):
			return self.__tie()
		if (self.__won):
			return self.__win()

		if ( (self.__turns + self.__order)%2 == 1 ):  #AI takes turn automatically
			mark = self.__strategy[self.__turns][self.__turn_history]
			if ( (len(mark) == 2) and (mark[1] == 1) ):
				self.__won = True
#				self.__board[int(mark[0])] = self.__symbols[(self.__turns + 1)%2]
#				return self.__win()
			mark = int(mark[0])
			self.turn(mark)
			if not (self.__tied or self.__won):
				self.display_board()

		return True

	def __win(self):  #display a win (or a loss, whatever)
		self.display_board()
		print("YOU LOSE.")
		self.__won = True
		return True

	def __tie(self):  #declare a tie
		self.display_board()
		print("TIED.")
		self.__tied = True
		return True

	def display_board(self):  #print the board arrangement
		print(
			"*_*_*_*",
			"|{}|{}|{}|".format(self.__board[1], self.__board[2], self.__board[3]),
			"*_*_*_*",
			"|{}|{}|{}|".format(self.__board[4], self.__board[5], self.__board[6]),
			"*_*_*_*",
			"|{}|{}|{}|".format(self.__board[7], self.__board[8], self.__board[9]),
			"*_*_*_*",
			sep='\n'
		)
		return True

	def is_finished(self):
		return self.__finished

	def is_tied(self):
		return self.__tied

	def is_won(self):  #as in, AI won (because player will never win anyway)
		return self.__won

	def turn_number(self):
		return self.__turns
